"""
–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è #10: –õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–∞–Ω–¥–æ–º—ñ–∑–æ–≤–∞–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
–ó–∞–≤–¥–∞–Ω–Ω—è 1: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –Ω–∞–ø–æ—ó–≤

–ó–∞–¥–∞—á–∞: –ú–∞–∫—Å–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ "–õ–∏–º–æ–Ω–∞–¥—É" —Ç–∞ "–§—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É"
–ø—Ä–∏ –æ–±–º–µ–∂–µ–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (PuLP).
"""

import pulp
from typing import Dict, Tuple

def solve_production_optimization():
    """
    –†–æ–∑–≤'—è–∑—É—î –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –Ω–∞–ø–æ—ó–≤.
    
    Returns:
        Tuple: (—Å—Ç–∞—Ç—É—Å_—Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–ª–∏–º–æ–Ω–∞–¥—É, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_—Ñ—Ä—É–∫—Ç–æ–≤–æ–≥–æ_—Å–æ–∫—É, –∑–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å)
    """
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–µ–ª—å –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (–º–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è)
    model = pulp.LpProblem("Production_Optimization", pulp.LpMaximize)
    
    # –ó–º—ñ–Ω–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞)
    # x1 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å "–õ–∏–º–æ–Ω–∞–¥—É"
    # x2 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—å "–§—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É"
    lemonade = pulp.LpVariable("Lemonade", lowBound=0, cat='Integer')
    fruit_juice = pulp.LpVariable("Fruit_Juice", lowBound=0, cat='Integer')
    
    # –¶—ñ–ª—å–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –º–∞–∫—Å–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    model += lemonade + fruit_juice, "Total_Products"
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤:
    
    # 1. –í–æ–¥–∞: –õ–∏–º–æ–Ω–∞–¥ –ø–æ—Ç—Ä–µ–±—É—î 2 –æ–¥., –§—Ä—É–∫—Ç–æ–≤–∏–π —Å—ñ–∫ –ø–æ—Ç—Ä–µ–±—É—î 1 –æ–¥., –≤—Å—å–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ 100 –æ–¥.
    model += 2 * lemonade + 1 * fruit_juice <= 100, "Water_Constraint"
    
    # 2. –¶—É–∫–æ—Ä: —Ç—ñ–ª—å–∫–∏ –¥–ª—è –õ–∏–º–æ–Ω–∞–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ 1 –æ–¥., –≤—Å—å–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ 50 –æ–¥.
    model += 1 * lemonade <= 50, "Sugar_Constraint"
    
    # 3. –õ–∏–º–æ–Ω–Ω–∏–π —Å—ñ–∫: —Ç—ñ–ª—å–∫–∏ –¥–ª—è –õ–∏–º–æ–Ω–∞–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ 1 –æ–¥., –≤—Å—å–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ 30 –æ–¥.
    model += 1 * lemonade <= 30, "Lemon_Juice_Constraint"
    
    # 4. –§—Ä—É–∫—Ç–æ–≤–µ –ø—é—Ä–µ: —Ç—ñ–ª—å–∫–∏ –¥–ª—è –§—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ 2 –æ–¥., –≤—Å—å–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ 40 –æ–¥.
    model += 2 * fruit_juice <= 40, "Fruit_Puree_Constraint"
    
    # –†–æ–∑–≤'—è–∑—É—î–º–æ –∑–∞–¥–∞—á—É
    model.solve()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    status = pulp.LpStatus[model.status]
    lemonade_qty = int(lemonade.varValue) if lemonade.varValue else 0
    fruit_juice_qty = int(fruit_juice.varValue) if fruit_juice.varValue else 0
    total_products = lemonade_qty + fruit_juice_qty
    
    return status, lemonade_qty, fruit_juice_qty, total_products, model

def analyze_resource_usage(lemonade_qty: int, fruit_juice_qty: int):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—Ä–∏ –∑–∞–¥–∞–Ω–æ–º—É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤—ñ.
    
    Args:
        lemonade_qty: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∏–º–æ–Ω–∞–¥—É
        fruit_juice_qty: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É
        
    Returns:
        Dict: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
    """
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
    resources = {
        "–í–æ–¥–∞": {
            "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ": 2 * lemonade_qty + 1 * fruit_juice_qty,
            "–¥–æ—Å—Ç—É–ø–Ω–æ": 100,
            "–∑–∞–ª–∏—à–æ–∫": 100 - (2 * lemonade_qty + 1 * fruit_juice_qty)
        },
        "–¶—É–∫–æ—Ä": {
            "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ": 1 * lemonade_qty,
            "–¥–æ—Å—Ç—É–ø–Ω–æ": 50,
            "–∑–∞–ª–∏—à–æ–∫": 50 - (1 * lemonade_qty)
        },
        "–õ–∏–º–æ–Ω–Ω–∏–π —Å—ñ–∫": {
            "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ": 1 * lemonade_qty,
            "–¥–æ—Å—Ç—É–ø–Ω–æ": 30,
            "–∑–∞–ª–∏—à–æ–∫": 30 - (1 * lemonade_qty)
        },
        "–§—Ä—É–∫—Ç–æ–≤–µ –ø—é—Ä–µ": {
            "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ": 2 * fruit_juice_qty,
            "–¥–æ—Å—Ç—É–ø–Ω–æ": 40,
            "–∑–∞–ª–∏—à–æ–∫": 40 - (2 * fruit_juice_qty)
        }
    }
    
    return resources

def display_results(status: str, lemonade_qty: int, fruit_juice_qty: int, 
                   total_products: int, resources: Dict):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.
    """
    print("üè≠ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á –í–ò–†–û–ë–ù–ò–¶–¢–í–ê –ù–ê–ü–û–á–í")
    print("=" * 60)
    
    print(f"\nüìä –°—Ç–∞—Ç—É—Å —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è: {status}")
    
    if status == "Optimal":
        print(f"\nüéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è:")
        print(f"   ‚Ä¢ –õ–∏–º–æ–Ω–∞–¥: {lemonade_qty} –æ–¥–∏–Ω–∏—Ü—å")
        print(f"   ‚Ä¢ –§—Ä—É–∫—Ç–æ–≤–∏–π —Å—ñ–∫: {fruit_juice_qty} –æ–¥–∏–Ω–∏—Ü—å")
        print(f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {total_products} –æ–¥–∏–Ω–∏—Ü—å")
        
        print(f"\nüìà –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤:")
        for resource, data in resources.items():
            usage_percent = (data['–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ'] / data['–¥–æ—Å—Ç—É–ø–Ω–æ']) * 100
            status_emoji = "üî¥" if data['–∑–∞–ª–∏—à–æ–∫'] == 0 else "üü°" if usage_percent > 80 else "üü¢"
            
            print(f"   {status_emoji} {resource}:")
            print(f"      –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {data['–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ']}/{data['–¥–æ—Å—Ç—É–ø–Ω–æ']} "
                  f"({usage_percent:.1f}%)")
            print(f"      –ó–∞–ª–∏—à–æ–∫: {data['–∑–∞–ª–∏—à–æ–∫']} –æ–¥–∏–Ω–∏—Ü—å")
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É—é—á–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
        limiting_resources = [name for name, data in resources.items() 
                            if data['–∑–∞–ª–∏—à–æ–∫'] == 0]
        
        if limiting_resources:
            print(f"\n‚ö†Ô∏è  –õ—ñ–º—ñ—Ç—É—é—á—ñ —Ä–µ—Å—É—Ä—Å–∏: {', '.join(limiting_resources)}")
        else:
            print(f"\n‚úÖ –í—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –º–∞—é—Ç—å –∑–∞–ª–∏—à–∫–∏")
            
    else:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è. –°—Ç–∞—Ç—É—Å: {status}")

def sensitivity_analysis():
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç—å –∞–Ω–∞–ª—ñ–∑ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ - —è–∫ –∑–º—ñ–Ω–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    print(f"\nüîç –ê–ù–ê–õ–Ü–ó –ß–£–¢–õ–ò–í–û–°–¢–Ü")
    print("=" * 40)
    
    base_status, base_lemonade, base_fruit_juice, base_total, _ = solve_production_optimization()
    
    print(f"–ë–∞–∑–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è: {base_lemonade} –ª–∏–º–æ–Ω–∞–¥—É + {base_fruit_juice} —Ñ—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É = {base_total} –≤—Å—å–æ–≥–æ")
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É –Ω–∞ 10%
    scenarios = [
        ("–í–æ–¥–∞ +10%", {"water": 110}),
        ("–¶—É–∫–æ—Ä +10%", {"sugar": 55}),
        ("–õ–∏–º–æ–Ω–Ω–∏–π —Å—ñ–∫ +10%", {"lemon": 33}),
        ("–§—Ä—É–∫—Ç–æ–≤–µ –ø—é—Ä–µ +10%", {"puree": 44})
    ]
    
    print(f"\n–í–ø–ª–∏–≤ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –Ω–∞ 10%:")
    
    for scenario_name, changes in scenarios:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –º–æ–¥–µ–ª—å –∑ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
        model = pulp.LpProblem("Sensitivity_Test", pulp.LpMaximize)
        
        lemonade = pulp.LpVariable("Lemonade", lowBound=0, cat='Integer')
        fruit_juice = pulp.LpVariable("Fruit_Juice", lowBound=0, cat='Integer')
        
        model += lemonade + fruit_juice, "Total_Products"
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –∞–±–æ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
        water_limit = changes.get("water", 100)
        sugar_limit = changes.get("sugar", 50)
        lemon_limit = changes.get("lemon", 30)
        puree_limit = changes.get("puree", 40)
        
        model += 2 * lemonade + 1 * fruit_juice <= water_limit, "Water"
        model += 1 * lemonade <= sugar_limit, "Sugar"
        model += 1 * lemonade <= lemon_limit, "Lemon"
        model += 2 * fruit_juice <= puree_limit, "Puree"
        
        model.solve()
        
        if model.status == 1:  # Optimal
            new_lemonade = int(lemonade.varValue) if lemonade.varValue else 0
            new_fruit_juice = int(fruit_juice.varValue) if fruit_juice.varValue else 0
            new_total = new_lemonade + new_fruit_juice
            improvement = new_total - base_total
            
            print(f"   {scenario_name}: {new_total} –≤—Å—å–æ–≥–æ (–∑–º—ñ–Ω–∞: {improvement:+d})")

def alternative_objective_functions():
    """
    –¢–µ—Å—Ç—É—î –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Ü—ñ–ª—å–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.
    """
    print(f"\nüéØ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–Ü –¶–Ü–õ–¨–û–í–Ü –§–£–ù–ö–¶–Ü–á")
    print("=" * 45)
    
    # –°—Ü–µ–Ω–∞—Ä—ñ–π 1: –ú–∞–∫—Å–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫ (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ —Ä—ñ–∑–Ω—É —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å)
    print("1. –ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏–±—É—Ç–∫—É (–õ–∏–º–æ–Ω–∞–¥: 3 –≥—Ä–Ω, –§—Ä—É–∫—Ç–æ–≤–∏–π —Å—ñ–∫: 2 –≥—Ä–Ω –∑–∞ –æ–¥–∏–Ω–∏—Ü—é):")
    
    model = pulp.LpProblem("Profit_Maximization", pulp.LpMaximize)
    lemonade = pulp.LpVariable("Lemonade", lowBound=0, cat='Integer')
    fruit_juice = pulp.LpVariable("Fruit_Juice", lowBound=0, cat='Integer')
    
    # –¶—ñ–ª—å–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –º–∞–∫—Å–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∏–±—É—Ç–æ–∫
    model += 3 * lemonade + 2 * fruit_juice, "Total_Profit"
    
    # –¢—ñ –∂ –æ–±–º–µ–∂–µ–Ω–Ω—è
    model += 2 * lemonade + 1 * fruit_juice <= 100, "Water"
    model += 1 * lemonade <= 50, "Sugar"
    model += 1 * lemonade <= 30, "Lemon"
    model += 2 * fruit_juice <= 40, "Puree"
    
    model.solve()
    
    if model.status == 1:
        profit_lemonade = int(lemonade.varValue) if lemonade.varValue else 0
        profit_fruit_juice = int(fruit_juice.varValue) if fruit_juice.varValue else 0
        total_profit = 3 * profit_lemonade + 2 * profit_fruit_juice
        
        print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è: {profit_lemonade} –ª–∏–º–æ–Ω–∞–¥—É + {profit_fruit_juice} —Ñ—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É")
        print(f"   –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {total_profit} –≥—Ä–Ω")

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞.
    """
    print("üíº –î–û–ú–ê–®–ù–Ñ –ó–ê–í–î–ê–ù–ù–Ø #10: –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –í–ò–†–û–ë–ù–ò–¶–¢–í–ê")
    print("–ó–∞–≤–¥–∞–Ω–Ω—è 1: –õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑ PuLP")
    print("=" * 65)
    
    print("\nüìã –£–º–æ–≤–∏ –∑–∞–¥–∞—á—ñ:")
    print("‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏: –õ–∏–º–æ–Ω–∞–¥, –§—Ä—É–∫—Ç–æ–≤–∏–π —Å—ñ–∫")
    print("‚Ä¢ –†–µ—Å—É—Ä—Å–∏: –í–æ–¥–∞ (100), –¶—É–∫–æ—Ä (50), –õ–∏–º–æ–Ω–Ω–∏–π —Å—ñ–∫ (30), –§—Ä—É–∫—Ç–æ–≤–µ –ø—é—Ä–µ (40)")
    print("‚Ä¢ –†–µ—Ü–µ–ø—Ç –õ–∏–º–æ–Ω–∞–¥—É: 2 –≤–æ–¥–∏ + 1 —Ü—É–∫–æ—Ä + 1 –ª–∏–º–æ–Ω–Ω–∏–π —Å—ñ–∫")
    print("‚Ä¢ –†–µ—Ü–µ–ø—Ç –§—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É: 1 –≤–æ–¥–∞ + 2 —Ñ—Ä—É–∫—Ç–æ–≤–µ –ø—é—Ä–µ")
    print("‚Ä¢ –ú–µ—Ç–∞: –ú–∞–∫—Å–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
    
    # –†–æ–∑–≤'—è–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∑–∞–¥–∞—á—É
    status, lemonade_qty, fruit_juice_qty, total_products, model = solve_production_optimization()
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
    resources = analyze_resource_usage(lemonade_qty, fruit_juice_qty)
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    display_results(status, lemonade_qty, fruit_juice_qty, total_products, resources)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑–∏
    sensitivity_analysis()
    alternative_objective_functions()
    
    print(f"\nüí° –í–ò–°–ù–û–í–ö–ò:")
    if status == "Optimal":
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è:")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {total_products}")
        print(f"   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω: {lemonade_qty} –ª–∏–º–æ–Ω–∞–¥—É + {fruit_juice_qty} —Ñ—Ä—É–∫—Ç–æ–≤–æ–≥–æ —Å–æ–∫—É")
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à —Ü—ñ–Ω–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
        limiting = [name for name, data in resources.items() if data['–∑–∞–ª–∏—à–æ–∫'] == 0]
        if limiting:
            print(f"   ‚Ä¢ –ù–∞–π–±—ñ–ª—å—à —Ü—ñ–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏: {', '.join(limiting)}")
            print(f"   ‚Ä¢ –î–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ —Å–ª—ñ–¥ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∑–∞–ø–∞—Å–∏ —Ü–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤")
    
    print(f"\nüéâ –ó–∞–≤–¥–∞–Ω–Ω—è 1 –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    
    return {
        'status': status,
        'lemonade': lemonade_qty,
        'fruit_juice': fruit_juice_qty,
        'total': total_products,
        'resources': resources
    }

if __name__ == "__main__":
    result = main()

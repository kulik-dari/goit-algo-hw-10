"""
–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è #10: –ó–∞–≤–¥–∞–Ω–Ω—è 2
–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–µ—Ç–æ–¥—É –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as spi
import random
from typing import Tuple, List

def f(x):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è: f(x) = x^2
    
    Args:
        x: –ó–Ω–∞—á–µ–Ω–Ω—è x (–º–æ–∂–µ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –∞–±–æ –º–∞—Å–∏–≤–æ–º)
        
    Returns:
        –ó–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó f(x) = x^2
    """
    return x ** 2

def analytical_integral(a: float, b: float) -> float:
    """
    –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—ó f(x) = x^2.
    
    –Ü–Ω—Ç–µ–≥—Ä–∞–ª –≤—ñ–¥ x^2 = x^3/3
    
    Args:
        a: –ù–∏–∂–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
        b: –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
        
    Returns:
        –¢–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞
    """
    return (b**3 / 3) - (a**3 / 3)

def monte_carlo_integration(func, a: float, b: float, n: int) -> Tuple[float, List[float]]:
    """
    –û–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞ –º–µ—Ç–æ–¥–æ–º –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ.
    
    Args:
        func: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
        a: –ù–∏–∂–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è  
        b: –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
        n: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Ç–æ—á–æ–∫
        
    Returns:
        Tuple[float, List[float]]: (–æ—Ü—ñ–Ω–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞, —ñ—Å—Ç–æ—Ä—ñ—è –Ω–∞–±–ª–∏–∂–µ–Ω—å)
    """
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ç–æ—á–∫–∏ x –≤ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ [a, b]
    random_x = np.random.uniform(a, b, n)
    
    # –û–±—á–∏—Å–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Ü–∏—Ö —Ç–æ—á–∫–∞—Ö
    function_values = func(random_x)
    
    # –û—Ü—ñ–Ω–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞: (b-a) * —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
    integral_estimate = (b - a) * np.mean(function_values)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞–±–ª–∏–∂–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–±—ñ–∂–Ω–æ—Å—Ç—ñ
    history = []
    running_sum = 0
    
    for i in range(n):
        running_sum += function_values[i]
        current_estimate = (b - a) * running_sum / (i + 1)
        history.append(current_estimate)
    
    return integral_estimate, history

def monte_carlo_geometric_method(func, a: float, b: float, n: int) -> Tuple[float, int, int]:
    """
    –ì–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ (–ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–æ–∫ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é).
    
    Args:
        func: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
        a: –ù–∏–∂–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
        b: –í–µ—Ä—Ö–Ω—è –º–µ–∂–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è  
        n: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Ç–æ—á–æ–∫
        
    Returns:
        Tuple[float, int, int]: (–æ—Ü—ñ–Ω–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞, —Ç–æ—á–∫–∏ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é, –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫)
    """
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
    x_range = np.linspace(a, b, 1000)
    y_max = np.max(func(x_range))
    
    points_under_curve = 0
    total_points = n
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ç–æ—á–∫–∏ –≤ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫—É [a, b] √ó [0, y_max]
    for _ in range(n):
        x = random.uniform(a, b)
        y = random.uniform(0, y_max)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ—á–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—ñ–¥ –∫—Ä–∏–≤–æ—é
        if y <= func(x):
            points_under_curve += 1
    
    # –ü–ª–æ—â–∞ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é = (–ø–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞) √ó (—á–∞—Å—Ç–∫–∞ —Ç–æ—á–æ–∫ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é)
    rectangle_area = (b - a) * y_max
    integral_estimate = rectangle_area * (points_under_curve / total_points)
    
    return integral_estimate, points_under_curve, total_points

def plot_function_and_integration(a: float, b: float):
    """
    –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è.
    """
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É –∑–Ω–∞—á–µ–Ω—å –¥–ª—è x
    x = np.linspace(-0.5, 2.5, 400)
    y = f(x)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
    ax.plot(x, y, 'r', linewidth=2, label='f(x) = x¬≤')
    
    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –æ–±–ª–∞—Å—Ç—ñ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é
    ix = np.linspace(a, b, 100)
    iy = f(ix)
    ax.fill_between(ix, iy, color='gray', alpha=0.3, label='–û–±–ª–∞—Å—Ç—å —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è')
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    ax.set_xlim([x[0], x[-1]])
    ax.set_ylim([0, max(y) + 0.1])
    ax.set_xlabel('x')
    ax.set_ylabel('f(x)')
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ–∂ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
    ax.axvline(x=a, color='blue', linestyle='--', alpha=0.7, label=f'x = {a}')
    ax.axvline(x=b, color='blue', linestyle='--', alpha=0.7, label=f'x = {b}')
    
    ax.set_title(f'–ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó f(x) = x¬≤ —Ç–∞ –æ–±–ª–∞—Å—Ç—å —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥ {a} –¥–æ {b}')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

def plot_convergence(history: List[float], true_value: float, n_points: int):
    """
    –°—Ç–≤–æ—Ä—é—î –≥—Ä–∞—Ñ—ñ–∫ –∑–±—ñ–∂–Ω–æ—Å—Ç—ñ –º–µ—Ç–æ–¥—É –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ.
    """
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
    
    iterations = range(1, len(history) + 1)
    
    # –ì—Ä–∞—Ñ—ñ–∫ –∑–±—ñ–∂–Ω–æ—Å—Ç—ñ
    ax1.plot(iterations, history, 'b-', alpha=0.7, label='–ù–∞–±–ª–∏–∂–µ–Ω–Ω—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ')
    ax1.axhline(y=true_value, color='r', linestyle='--', label=f'–¢–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {true_value:.6f}')
    ax1.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫')
    ax1.set_ylabel('–û—Ü—ñ–Ω–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞')
    ax1.set_title('–ó–±—ñ–∂–Ω—ñ—Å—Ç—å –º–µ—Ç–æ–¥—É –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ—ñ–∫ –ø–æ—Ö–∏–±–∫–∏
    errors = [abs(estimate - true_value) for estimate in history]
    ax2.plot(iterations, errors, 'g-', alpha=0.7)
    ax2.set_xlabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫')
    ax2.set_ylabel('–ê–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞')
    ax2.set_title('–ü–æ—Ö–∏–±–∫–∞ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è')
    ax2.set_yscale('log')
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    print("üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–µ—Ç–æ–¥—É –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ")
    print("–ó–∞–ø—É—Å—Ç—ñ—Ç—å task2_part2.py –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—á–∏—Å–ª–µ–Ω—å")
def compare_methods(a: float, b: float, n_points: List[int]):
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î —Ç–æ—á–Ω—ñ—Å—Ç—å –º–µ—Ç–æ–¥—É –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –¥–ª—è —Ä—ñ–∑–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫.
    """
    print(f"\nüìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –¢–û–ß–ù–û–°–¢–Ü –î–õ–Ø –†–Ü–ó–ù–û–á –ö–Ü–õ–¨–ö–û–°–¢–Ü –¢–û–ß–û–ö")
    print("=" * 65)
    
    true_value = analytical_integral(a, b)
    scipy_result, scipy_error = spi.quad(f, a, b)
    
    print(f"–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {true_value:.8f}")
    print(f"SciPy quad —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {scipy_result:.8f} ¬± {scipy_error:.2e}")
    print()
    
    print(f"{'–¢–æ—á–∫–∏':<8} {'–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ':<12} {'–ü–æ—Ö–∏–±–∫–∞':<12} {'–í—ñ–¥–Ω. –ø–æ—Ö–∏–±–∫–∞ (%)':<18}")
    print("-" * 65)
    
    for n in n_points:
        mc_result, _ = monte_carlo_integration(f, a, b, n)
        error = abs(mc_result - true_value)
        relative_error = (error / true_value) * 100
        
        print(f"{n:<8} {mc_result:<12.6f} {error:<12.6f} {relative_error:<18.4f}")

def demonstrate_geometric_method(a: float, b: float, n: int):
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä—É—î –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é.
    """
    print(f"\nüéØ –ì–ï–û–ú–ï–¢–†–ò–ß–ù–ò–ô –ú–ï–¢–û–î –ú–û–ù–¢–ï-–ö–ê–†–õ–û")
    print("=" * 40)
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥
    geometric_result, points_under, total_points = monte_carlo_geometric_method(f, a, b, n)
    
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫: {total_points}")
    print(f"–¢–æ—á–∫–∏ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é: {points_under}")
    print(f"–ß–∞—Å—Ç–∫–∞ —Ç–æ—á–æ–∫ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é: {points_under/total_points:.4f}")
    print(f"–û—Ü—ñ–Ω–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞: {geometric_result:.6f}")
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # –ú–∞–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é
    x_plot = np.linspace(a, b, 100)
    y_plot = f(x_plot)
    ax.plot(x_plot, y_plot, 'r-', linewidth=2, label='f(x) = x¬≤')
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ—á–∫–∏ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó (–º–µ–Ω—à–µ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ)
    vis_n = min(500, n)
    x_range = np.linspace(a, b, 1000)
    y_max = np.max(f(x_range))
    
    x_points = np.random.uniform(a, b, vis_n)
    y_points = np.random.uniform(0, y_max, vis_n)
    
    # –†–æ–∑—Ñ–∞—Ä–±–æ–≤—É—î–º–æ —Ç–æ—á–∫–∏
    colors = ['green' if y <= f(x) else 'red' for x, y in zip(x_points, y_points)]
    ax.scatter(x_points, y_points, c=colors, alpha=0.6, s=1)
    
    ax.set_xlim([a, b])
    ax.set_ylim([0, y_max])
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_title(f'–ì–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ\n–ó–µ–ª–µ–Ω—ñ —Ç–æ—á–∫–∏ –ø—ñ–¥ –∫—Ä–∏–≤–æ—é, —á–µ—Ä–≤–æ–Ω—ñ - –Ω–∞–¥ –Ω–µ—é')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞.
    """
    print("üé≤ –î–û–ú–ê–®–ù–Ñ –ó–ê–í–î–ê–ù–ù–Ø #10: –ú–ï–¢–û–î –ú–û–ù–¢–ï-–ö–ê–†–õ–û")
    print("–ó–∞–≤–¥–∞–Ω–Ω—è 2: –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞")
    print("=" * 55)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
    a, b = 0, 2  # –ú–µ–∂—ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
    n = 100000   # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
    
    print(f"\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:")
    print(f"‚Ä¢ –§—É–Ω–∫—Ü—ñ—è: f(x) = x¬≤")
    print(f"‚Ä¢ –ú–µ–∂—ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è: [{a}, {b}]")
    print(f"‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ: {n:,}")
    
    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è
    print(f"\nüìà –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó...")
    plot_function_and_integration(a, b)
    
    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    true_value = analytical_integral(a, b)
    print(f"\nüéØ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è:")
    print(f"‚à´[{a}‚Üí{b}] x¬≤ dx = [x¬≥/3][{a}‚Üí{b}] = {b}¬≥/3 - {a}¬≥/3 = {true_value:.8f}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é SciPy
    scipy_result, scipy_error = spi.quad(f, a, b)
    print(f"\nüî¨ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ SciPy quad:")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {scipy_result:.8f}")
    print(f"–û—Ü—ñ–Ω–∫–∞ –ø–æ—Ö–∏–±–∫–∏: {scipy_error:.2e}")
    
    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ—Ç–æ–¥–æ–º –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
    print(f"\nüé≤ –ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ:")
    mc_result, history = monte_carlo_integration(f, a, b, n)
    mc_error = abs(mc_result - true_value)
    mc_relative_error = (mc_error / true_value) * 100
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {mc_result:.8f}")
    print(f"–ê–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞: {mc_error:.8f}")
    print(f"–í—ñ–¥–Ω–æ—Å–Ω–∞ –ø–æ—Ö–∏–±–∫–∞: {mc_relative_error:.4f}%")
    
    # –ì—Ä–∞—Ñ—ñ–∫ –∑–±—ñ–∂–Ω–æ—Å—Ç—ñ
    print(f"\nüìä –ê–Ω–∞–ª—ñ–∑ –∑–±—ñ–∂–Ω–æ—Å—Ç—ñ...")
    plot_convergence(history, true_value, n)
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫
    n_points = [100, 1000, 10000, 100000, 1000000]
    compare_methods(a, b, n_points)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É
    demonstrate_geometric_method(a, b, 10000)
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    print(f"\nüìã –ü–Ü–î–°–£–ú–ö–û–í–ï –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø:")
    print("=" * 50)
    print(f"{'–ú–µ—Ç–æ–¥':<20} {'–ó–Ω–∞—á–µ–Ω–Ω—è':<12} {'–ü–æ—Ö–∏–±–∫–∞':<12}")
    print("-" * 50)
    print(f"{'–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π':<20} {true_value:<12.8f} {'0.00000000':<12}")
    print(f"{'SciPy quad':<20} {scipy_result:<12.8f} {abs(scipy_result-true_value):<12.8f}")
    print(f"{'–ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ':<20} {mc_result:<12.8f} {mc_error:<12.8f}")
    
    # –í–∏—Å–Ω–æ–≤–∫–∏
    print(f"\nüí° –í–ò–°–ù–û–í–ö–ò:")
    print("=" * 20)
    
    if mc_relative_error < 1:
        accuracy_level = "–≤—ñ–¥–º—ñ–Ω–Ω–∞"
    elif mc_relative_error < 5:
        accuracy_level = "—Ö–æ—Ä–æ—à–∞"
    elif mc_relative_error < 10:
        accuracy_level = "–∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞"
    else:
        accuracy_level = "–Ω–∏–∑—å–∫–∞"
    
    print(f"‚úÖ –ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –ø–æ–∫–∞–∑–∞–≤ {accuracy_level} —Ç–æ—á–Ω—ñ—Å—Ç—å")
    print(f"‚úÖ –í—ñ–¥–Ω–æ—Å–Ω–∞ –ø–æ—Ö–∏–±–∫–∞: {mc_relative_error:.4f}%")
    print(f"‚úÖ –ú–µ—Ç–æ–¥ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –¥–æ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏ –∑–±—ñ–ª—å—à–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ—á–æ–∫")
    print(f"‚úÖ –ì–µ–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–∞—î —ñ–Ω—Ç—É—ó—Ç–∏–≤–Ω–µ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –º–µ—Ç–æ–¥—É")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("‚Ä¢ –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ 1%: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ > 100,000 —Ç–æ—á–æ–∫")
    print("‚Ä¢ –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ 0.1%: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ > 1,000,000 —Ç–æ—á–æ–∫")
    print("‚Ä¢ –ú–µ—Ç–æ–¥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–∏—Ö —ñ–Ω—Ç–µ–≥—Ä–∞–ª—ñ–≤")
    print("‚Ä¢ –ó–±—ñ–∂–Ω—ñ—Å—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–∞ 1/‚àön, –¥–µ n - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫")
    
    print(f"\nüéâ –ó–∞–≤–¥–∞–Ω–Ω—è 2 –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    
    return {
        'analytical': true_value,
        'scipy': scipy_result,
        'monte_carlo': mc_result,
        'error': mc_error,
        'relative_error': mc_relative_error
    }

if __name__ == "__main__":
    result = main()
